From 7153064360660903d6e3f3f3fcdea9f007137a58 Mon Sep 17 00:00:00 2001
From: Masami Ichikawa <masami.ichikawa@miraclelinux.com>
Date: Tue, 13 Sep 2022 07:03:39 +0000
Subject: [PATCH] Disable address-of-packed-member warnings with gcc9

gcc9 has turned this warning into error when -Werror is used, lets paper
it over by turning it into a warning for now

Fixes
    error: taking address of packed member of 'struct head' may result
in an unaligned pointer value [-Werror=address-of-packed-member]

Upstream-Status: Pending
Signed-off-by: Khem Raj <raj.khem@gmail.com>
[Apply to grub 2.06]
Signed-off-by: Masami Ichikawa <masami.ichikawa@miraclelinux.com>
---
 grub-core/commands/lsacpi.c        |  3 +++
 grub-core/commands/lspci.c         |  9 ++++++---
 grub-core/fs/cpio_common.c         |  2 +-
 grub-core/fs/hfs.c                 | 17 ++++++++++-------
 grub-core/fs/hfsplus.c             | 11 +++++++----
 grub-core/kern/efi/efi.c           |  5 ++++-
 grub-core/loader/efi/chainloader.c |  3 +++
 7 files changed, 34 insertions(+), 16 deletions(-)

diff --git a/grub-core/commands/lsacpi.c b/grub-core/commands/lsacpi.c
index 0824914..c766e05 100644
--- a/grub-core/commands/lsacpi.c
+++ b/grub-core/commands/lsacpi.c
@@ -26,6 +26,9 @@
 #include <grub/dl.h>
 
 #pragma GCC diagnostic ignored "-Wcast-align"
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
diff --git a/grub-core/commands/lspci.c b/grub-core/commands/lspci.c
index 65213a3..481316d 100644
--- a/grub-core/commands/lspci.c
+++ b/grub-core/commands/lspci.c
@@ -26,6 +26,9 @@
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 struct grub_pci_classname
 {
   int class;
@@ -171,7 +174,7 @@ grub_lspci_iter (grub_pci_device_t dev, grub_pci_id_t pciid,
 
 	  if (space == 0)
 	    continue;
-	 
+
 	  switch (space & GRUB_PCI_ADDR_SPACE_MASK)
 	    {
 	    case GRUB_PCI_ADDR_SPACE_IO:
@@ -195,13 +198,13 @@ grub_lspci_iter (grub_pci_device_t dev, grub_pci_id_t pciid,
 			       (space & GRUB_PCI_ADDR_MEM_MASK),
 			       space & GRUB_PCI_ADDR_MEM_PREFETCH
 			       ? "prefetchable" : "non-prefetchable");
-		 
+
 		}
 	      else
 		grub_printf ("\t32-bit memory space %d at 0x%016llx [%s]\n",
 			     (unsigned) ((reg - GRUB_PCI_REG_ADDRESSES)
 			      / sizeof (grub_uint32_t)) - 1,
-			     (unsigned long long) 
+			     (unsigned long long)
 			     (space & GRUB_PCI_ADDR_MEM_MASK),
 			     space & GRUB_PCI_ADDR_MEM_PREFETCH
 			     ? "prefetchable" : "non-prefetchable");
diff --git a/grub-core/fs/cpio_common.c b/grub-core/fs/cpio_common.c
index 4e885d6..5d41b6f 100644
--- a/grub-core/fs/cpio_common.c
+++ b/grub-core/fs/cpio_common.c
@@ -117,7 +117,7 @@ grub_cpio_get_link_target (struct grub_archelp_data *data)
   if (!ret)
     return NULL;
 
-  err = grub_disk_read (data->disk, 0, data->dofs, data->size, 
+  err = grub_disk_read (data->disk, 0, data->dofs, data->size,
 			ret);
   if (err)
     {
diff --git a/grub-core/fs/hfs.c b/grub-core/fs/hfs.c
index f419965..ef2dbc8 100644
--- a/grub-core/fs/hfs.c
+++ b/grub-core/fs/hfs.c
@@ -33,6 +33,9 @@
 #include <grub/lockdown.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 
 #define	GRUB_HFS_SBLOCK		2
 #define GRUB_HFS_EMBED_HFSPLUS_SIG 0x482B
@@ -883,7 +886,7 @@ grub_hfs_iterate_dir_it_dir (struct grub_hfs_node *hnd __attribute ((unused)),
 {
   struct grub_hfs_catalog_key *ckey = rec->key;
   struct grub_hfs_iterate_dir_node_found_ctx *ctx = hook_arg;
-  
+
   /* Stop when the entries do not match anymore.  */
   if (ckey->parent_dir != ctx->dir_be)
     return 1;
@@ -1077,7 +1080,7 @@ macroman_to_utf8 (char *to, const grub_uint8_t *from, grub_size_t len,
 	{
 	  *optr++ = ':';
 	  continue;
-	}	
+	}
       if (!(*iptr & 0x80))
 	{
 	  *optr++ = *iptr;
@@ -1094,7 +1097,7 @@ utf8_to_macroman (grub_uint8_t *to, const char *from)
   grub_uint8_t *end = to + 31;
   grub_uint8_t *optr = to;
   const char *iptr = from;
-  
+
   while (*iptr && optr < end)
     {
       int i, clen;
@@ -1104,7 +1107,7 @@ utf8_to_macroman (grub_uint8_t *to, const char *from)
 	  *optr++ = '/';
 	  iptr++;
 	  continue;
-	}	
+	}
       if (!(*iptr & 0x80))
 	{
 	  *optr++ = *iptr++;
@@ -1165,7 +1168,7 @@ lookup_file (grub_fshelp_node_t dir,
   *foundnode = grub_malloc (sizeof (struct grub_fshelp_node));
   if (!*foundnode)
     return grub_errno;
-  
+
   (*foundnode)->inode = grub_be_to_cpu32 (fdrec.dir.dirid);
   (*foundnode)->fdrec = fdrec;
   (*foundnode)->data = dir->data;
@@ -1266,7 +1269,7 @@ grub_hfs_dir (grub_device_t device, const char *path, grub_fs_dir_hook_t hook,
       .hook_data = hook_data
     };
   grub_fshelp_node_t found = NULL;
-  
+
   grub_dl_ref (my_mod);
 
   data = grub_hfs_mount (device->disk);
@@ -1295,7 +1298,7 @@ grub_hfs_open (struct grub_file *file, const char *name)
 {
   struct grub_hfs_data *data;
   grub_fshelp_node_t found = NULL;
-  
+
   grub_dl_ref (my_mod);
 
   data = grub_hfs_mount (file->device->disk);
diff --git a/grub-core/fs/hfsplus.c b/grub-core/fs/hfsplus.c
index 19c7b33..4715293 100644
--- a/grub-core/fs/hfsplus.c
+++ b/grub-core/fs/hfsplus.c
@@ -19,7 +19,7 @@
 
 /* HFS+ is documented at http://developer.apple.com/technotes/tn/tn1150.html */
 
-#define grub_fshelp_node grub_hfsplus_file 
+#define grub_fshelp_node grub_hfsplus_file
 #include <grub/err.h>
 #include <grub/file.h>
 #include <grub/mm.h>
@@ -35,6 +35,9 @@
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 /* The type of node.  */
 enum grub_hfsplus_btnode_type
   {
@@ -146,7 +149,7 @@ grub_hfsplus_read_block (grub_fshelp_node_t node, grub_disk_addr_t fileblock)
 {
   struct grub_hfsplus_btnode *nnode = 0;
   grub_disk_addr_t blksleft = fileblock;
-  struct grub_hfsplus_extent *extents = node->compressed 
+  struct grub_hfsplus_extent *extents = node->compressed
     ? &node->resource_extents[0] : &node->extents[0];
 
   while (1)
@@ -477,7 +480,7 @@ grub_hfsplus_cmp_extkey (struct grub_hfsplus_key *keya,
 
   if (extkey_a->type < extkey_b->type)
     return -1;
-  
+
   akey = grub_be_to_cpu32 (extkey_a->start);
   if (akey > extkey_b->start)
     return 1;
@@ -568,7 +571,7 @@ grub_hfsplus_btree_search (struct grub_hfsplus_btree *btree,
 			   struct grub_hfsplus_key_internal *key,
 			   int (*compare_keys) (struct grub_hfsplus_key *keya,
 						struct grub_hfsplus_key_internal *keyb),
-			   struct grub_hfsplus_btnode **matchnode, 
+			   struct grub_hfsplus_btnode **matchnode,
 			   grub_off_t *keyoffset)
 {
   grub_uint64_t currnode;
diff --git a/grub-core/kern/efi/efi.c b/grub-core/kern/efi/efi.c
index 8cff7be..be43e8b 100644
--- a/grub-core/kern/efi/efi.c
+++ b/grub-core/kern/efi/efi.c
@@ -29,6 +29,9 @@
 #include <grub/mm.h>
 #include <grub/loader.h>
 
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 /* The handle of GRUB itself. Filled in by the startup code.  */
 grub_efi_handle_t grub_efi_image_handle;
 
@@ -211,7 +214,7 @@ grub_efi_set_variable(const char *var, const grub_efi_guid_t *guid,
 
   r = grub_efi_system_table->runtime_services;
 
-  status = efi_call_5 (r->set_variable, var16, guid, 
+  status = efi_call_5 (r->set_variable, var16, guid,
 		       (GRUB_EFI_VARIABLE_NON_VOLATILE
 			| GRUB_EFI_VARIABLE_BOOTSERVICE_ACCESS
 			| GRUB_EFI_VARIABLE_RUNTIME_ACCESS),
diff --git a/grub-core/loader/efi/chainloader.c b/grub-core/loader/efi/chainloader.c
index 7557eb2..6ff7972 100644
--- a/grub-core/loader/efi/chainloader.c
+++ b/grub-core/loader/efi/chainloader.c
@@ -41,6 +41,9 @@
 #endif
 
 GRUB_MOD_LICENSE ("GPLv3+");
+#if __GNUC__ >= 9
+#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
+#endif
 
 static grub_dl_t my_mod;
 
-- 
2.25.1

